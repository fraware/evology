Wrote profile results to profile_iv.py.lprof
Timer unit: 1e-06 s

Total time: 7.83677 s
File: profile/profile_iv.py
Function: profile_iv at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def profile_iv(popsize, iterations):
    13         1      46678.0  46678.0      0.6      pop, asset_supply = cr.CreatePop(popsize, 'extended', [1/3, 1/3, 1/3], 100)
    14      1001       1384.0      1.4      0.0      for ind in pop:
    15      1000       8402.0      8.4      0.1          ind.wealth_series = [random.randint(1000, 10000) + 1] * 63
    16      1000       1582.0      1.6      0.0          if ind.wealth_series[0] == 0:
    17                                                       print(ind.wealth_series)
    18                                                       raise ValueError('Wealth series = 0')
    19      1000       1439.0      1.4      0.0          ind.age = 65
    20                                           
    21      1001     119261.0    119.1      1.5      for t in tqdm(range(iterations)):
    22                                           
    23                                                   # # Invent some wealth
    24                                                   # for ind in pop:
    25                                                   #     ind.wealth = 1000
    26                                                   #     ind.wealth_series.append(ind.wealth)
    27                                                   #     if len(ind.wealth_series) > 63:
    28                                                   #         del ind.wealth_series[0]
    29                                                       #ind.last_quarter_wealth = ind.wealth_series[0]
    30                                                   
    31                                                   # Apply investment
    32      1000      20826.0     20.8      0.3          randoms = np.random.random(size=len(pop))
    33      1000      69778.0     69.8      0.9          gumbel_draws_positive = np.random.gumbel(3.89050923, 2.08605884, size=len(pop)) 
    34      1000      64979.0     65.0      0.8          gumbel_draws_negative = np.random.gumbel(3.55311431, 2.13949923, size=len(pop)) 
    35                                           
    36   1001000    1498350.0      1.5     19.1          for i, ind in enumerate(pop):
    37                                                       #ind.age += 1
    38                                                       # Calculate quarterly return
    39                                                       #if len(ind.wealth_series) == 63:
    40   1000000    1490149.0      1.5     19.0              if ind.age >= 63:    
    41                                                           #ind_wealth = ind.wealth
    42                                                           # if ind.wealth_series[0] == 0:
    43                                                           #     ind.wealth_series[0] = 1000
    44                                           
    45                                                           #quarterly_return = (ind.wealth / ind.wealth_series[0]) - 1.
    46                                           
    47                                                           # Draw the sign of the investment flow
    48   1000000    2039142.0      2.0     26.0                  if randoms[i] <= sigmoid((ind.wealth / ind.wealth_series[0]) - 1.):
    49                                                               # Draw the value of the investment flow from Gumbel distributions (negative side)
    50                                                               #ratio = - gumbel_draws_negative[i] #np.random.gumbel(3.89050923, 2.08605884) 
    51   1000000    2474801.0      2.5     31.6                      ind.cash += (- gumbel_draws_negative[i] / (6300)) * ind.wealth
    52                                                           else: #positive side
    53                                                               #ratio = gumbel_draws_positive[i] #np.random.gumbel(3.55311431, 2.13949923) 
    54                                                               ind.cash += (gumbel_draws_positive[i] / (6300)) * ind.wealth
    55                                           
    56                                                           # Apply investment flows converted to daily amounts and ratios instead of percentages
    57                                                           # flow = (ratio / (6300)) * ind.wealth
    58                                                           #ind.investor_flow = flow
    59                                                               
    60                                           
    61                                           
    62                                                           #ind.investment_series.append(ind.investor_flow)
    63                                                           #if len(ind.investment_series) > 63:
    64                                                           #    del ind.investment_series[0]
    65                                                       
    66                                                       else:
    67                                                           ind.investor_flow = np.nan
    68         1          2.0      2.0      0.0      return pop

